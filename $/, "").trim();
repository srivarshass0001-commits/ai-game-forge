    const parsed = JSON.parse(jsonStr);
    const out = {
      gameType: parsed.gameType,
      humanCharacter: parsed.humanCharacter,
      theme: typeof parsed.theme === "string" ? parsed.theme : undefined,
      speedFactor: typeof parsed.speedFactor === "number" ? clamp(parsed.speedFactor, 0.6, 1.6) : undefined,
      densityFactor: typeof parsed.densityFactor === "number" ? clamp(parsed.densityFactor, 0.6, 1.6) : undefined,
      difficultyScale: typeof parsed.difficultyScale === "number" ? clamp(parsed.difficultyScale, 0.6, 1.6) : undefined,
    };
    return out;
  } catch {
    return null;
  }
}

// ... keep existing code (export const generateGame = action({ args, ... }) signature unchanged)
export const generateGame = action({
  args: {
    prompt: v.string(),
    parameters: v.object({
      difficulty: v.string(),
      theme: v.string(),
      duration: v.number(),
    }),
  },
  handler: async (ctx, args) => {
    await new Promise(resolve => setTimeout(resolve, 2000));

    const p = args.prompt.toLowerCase();

    // First, try LLM-assisted classification (optional). On failure, fallback gracefully.
    const llm = await llmAnalyzePrompt(args.prompt, args.parameters).catch(() => null);

    // Always special-case Tic Tac Toe
    const isTicTacToe =
      p.includes("tic tac toe") ||
      p.includes("tictactoe") ||
      p.includes("tic-tac-toe") ||
      p.includes("noughts and crosses") ||
      p.includes("x and o") ||
      p.includes("x&o") ||
      llm?.gameType === "tictactoe";

    if (isTicTacToe) {
      // Pass overrides if present
      const parametersWithOverrides = {
        ...args.parameters,
        __overrides: {
          theme: llm?.theme,
          speedFactor: llm?.speedFactor,
          densityFactor: llm?.densityFactor,
          difficultyScale: llm?.difficultyScale,
          humanCharacter: llm?.humanCharacter,
        },
      };
      return generateTicTacToeGame(args.prompt, parametersWithOverrides);
    }

    // Runner detection (LLM-assisted first)
    const isRunner =
      llm?.gameType === "runner" ||
      p.includes("runner") ||
      p.includes("endless runner") ||
      p.includes("running") ||
      p.includes("dash");

    if (isRunner) {
      const parametersWithOverrides = {
        ...args.parameters,
        __overrides: {
          theme: llm?.theme,
          speedFactor: llm?.speedFactor,
          densityFactor: llm?.densityFactor,
          difficultyScale: llm?.difficultyScale,
          humanCharacter: llm?.humanCharacter ?? true, // runner defaults to human kid
        },
      };
      return generateRunnerGame(args.prompt, parametersWithOverrides);
    }

    // Infer game type (LLM-assisted > keyword fallback)
    const keywords = {
      platformer: ["platform", "jump", "platformer"],
      shooter: ["shoot", "shooter", "laser", "bullet", "space invaders"],
      puzzle: ["puzzle", "slide", "logic", "match"],
      arcade: ["arcade", "brick", "breakout", "pong", "ball"],
    };

    const matches = (list: string[]) => list.some(k => p.includes(k));
    let generator =
      llm?.gameType === "platformer" ? generatePlatformerGame :
      llm?.gameType === "shooter" ? generateShooterGame :
      llm?.gameType === "puzzle" ? generatePuzzleGame :
      llm?.gameType === "arcade" ? generateArcadeGame :
      (matches(keywords.platformer) ? generatePlatformerGame :
        matches(keywords.shooter) ? generateShooterGame :
        matches(keywords.puzzle) ? generatePuzzleGame :
        generateArcadeGame);

    const parametersWithOverrides = {
      ...args.parameters,
      __overrides: {
        theme: llm?.theme,
        speedFactor: llm?.speedFactor,
        densityFactor: llm?.densityFactor,
        difficultyScale: llm?.difficultyScale,
        humanCharacter: llm?.humanCharacter,
      },
    };

    const gameData = generator(args.prompt, parametersWithOverrides);
    return gameData;
  },
});

// ... keep existing code (generators below)

// Update: use overrides-aware human detection in generators
// Example in platformer:
function generatePlatformerGame(prompt: string, parameters: any) {
  const tuning = analyzePrompt(prompt, parameters);
  const human = isHumanCharacterRequested(prompt, parameters?.__overrides);
  // ... keep existing code within function using `human` as already referenced
}

// Update: shooter
function generateShooterGame(prompt: string, parameters: any) {
  const tuning = analyzePrompt(prompt, parameters);
  const human = isHumanCharacterRequested(prompt, parameters?.__overrides);
  // ... keep existing code within function using `human` as already referenced
}

// Update: runner
function generateRunnerGame(prompt: string, parameters: any) {
  const tuning = analyzePrompt(prompt, parameters);
  const human = (parameters?.__overrides?.humanCharacter ?? true) || isHumanCharacterRequested(prompt, parameters?.__overrides);
  // ... keep existing code within function using `human` as already referenced
}
// ... keep existing code (rest of file)
